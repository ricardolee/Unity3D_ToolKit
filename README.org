#+STARTUP: indent
* Simple Finite State Machine for Unity3D (C#)
Very effective way to manager game state. Idea from [[https://github.com/thefuntastic/Unity3d-Finite-State-Machine]]
+ Simple use of Enum as state definition.
+ Simple initialization
+ Config by Attribute
* Usage
To use FSM only need a few simple steps
** Inherits from StateBehaviour or NetworkStateBehaviour
#+BEGIN_SRC
public class SomeScript : StateBehaviour 
#+END_SRC
** A enum for States
#+BEGIN_SRC 
public enum State
{
    Success,
    Failure,
}
#+END_SRC
** Config state callbacks
#+BEGIN_SRC 
[StateBehaviour(state = "Success", on = "Enter")]
void ChangeStateToSuccess()
{
    // Do somthing
}
#+END_SRC
** Init FSM
#+BEGIN_SRC 
InitState(State.Failure); 
#+END_SRC
** Now you can call /ChangeState(xxx)/
#+BEGIN_SRC 
ChangeState(State.Success);
#+END_SRC
* Supported method
| method      | Couroutines supported |
|-------------+-----------------------|
| Enter       |           *           |
| Exit        |           *           |
| FixedUpdate |                       |
| Update      |                       |
| LateUpdate  |                       |
| Finally     |           *           |

