#+STARTUP: indent
* Event Dispatcher
Very effective way to manager game event. Like take damage and shoot etc..
+ Trigger Event simple
+ Configure Event Listener simple
+ Support config by Attribute
+ Support filter if you want modify event args.
** Usage
Few simple step
*** Attach a EventDispatcher to GameObject
#+BEGIN_SRC
EventDispatcher events;
void Start()
{
    events = GetComponent<EventDispatcher>()
}
#+END_SRC
*** Declare a EventListener
#+BEGIN_SRC 
[EventListener(name = "DAMAGE")]
void DamageHealth(int dmg)
{
    health -= dmg;
}
#+END_SRC
*** Trigger the Event
#+BEGIN_SRC 
events.Trigger("DAMAGE", 10);
#+END_SRC
** Optional
*** Declare a Filter
#+BEGIN_SRC
[EventFilter(name = "DAMAGE")]
void DoubleDamage(object[] objs)
{
    objs[0] = (int)objs[0] * 2;
}
#+END_SRC
you can return a bool. Break call chain if you return false.

* Finite State Machine
Same manager your game object state. It depend the Event Dispatcher
+ Change state simple, every state is define by a string
+ Support multi-state, like "GameState" "Health" etc
+ Support config state callback by Attribute 
+ Config unity behaviour callback easy, Like Update, FixUpdate
** Usage
*** Attach a FiniteStateMachine to GameObject it require EventDispatcher
#+BEGIN_SRC 
FiniteStateMachine fsm;
void Start()
{
    fsm = GetComponent<FiniteStateMachine>();
}
#+END_SRC
*** Declare a StateListener 
like decare event listener.
"Enter", "Exit" is Standard.
#+BEGIN_SRC 
[StateListener(state = "GameState", when = "Success", on = "Enter")]
void ShowSuccessBox()
{
    //XXXXX;
}
#+END_SRC
*** Change State
#+BEGIN_SRC
fsm.Change("GameState", "Success");
#+END_SRC
** Optional
*** GetCurrentState
#+BEGIN_SRC
fsm.GetCurrentState("GameState"); // if not init, it will return null
#+END_SRC
*** Proxy MonoBehaviour event Callback
#+BEGIN_SRC 
[StateListener(state = "GameState", when = "Success", on = "Update")]
void SuccessUpdate()
{
   // Do Update in Success;
}
[StateListener(state = "GameState", when = "Play", on = "Update")]
void PlayUpdate()
{
   // Do Update in Play;
}

void Update() {
    fsm.Trigger("GameState", "Update");
}
#+END_SRC
When yout change "GameState" to Success or Play, it will auto proxy to the true Update callback.





