#+STARTUP: indent
* Event Dispatcher
Very effective way to manager game event. Like take damage and shoot etc..
+ Trigger Event simple
+ Configure Event Listener simple
+ Support config by Attribute
+ Support filter if you want modify event args.
** Usage
Few simple step
*** Attach a EventDispatcher to GameObject
#+BEGIN_SRC
EventDispatcher events;
void Start()
{
    events = GetComponent<EventDispatcher>()
}
#+END_SRC
*** Declare a EventListener
#+BEGIN_SRC 
[EventListener(name = "DAMAGE")]
void DamageHealth(int dmg)
{
    health -= dmg;
}
#+END_SRC
*** Trigger the Event
#+BEGIN_SRC 
events.Trigger("DAMAGE", 10);
#+END_SRC
** Optional
*** Declare a Filter
#+BEGIN_SRC
[EventFilter(name = "DAMAGE")]
void DoubleDamage(object[] objs)
{
    objs[0] = (int)objs[0] * 2;
}
#+END_SRC
you can return a bool. Break call chain if you return false.

* State Manager
Same manager your game object state.
+ Change state simple, use enum
+ Support multi-state, like "GameState" "Health" etc
+ Support config state event by Attribute 
+ Support inject state machine by Attribute
+ Config unity behaviour callback easy, Like Update, FixUpdate
** Usage
*** Require a StateManager to your class it will auto add to your gameobject.
#+begin_src C
[RequireComponent(typeof(StateManager))]
class YourBehaviour : Monobehaviour
#+end_src
*** Declare a enum  
#+begin_src c
public enum GameState {
    Play, Success, Failure
}
#+end_src
*** Declare a StateMachine with [StateMachinInject]
#+begin_src C
[StateMachineInject]
public StateMachine<GameState> _gameStateMachie;
#+end_src
*** Init && Change State
#+BEGIN_SRC C
_gameStateMachine.Init(Play);
_gameStateMachine.Change(GameState.Success);
#+END_SRC
*** GetCurrentState
#+BEGIN_SRC C
stateManager.CurrentState; // if not init, it will return null
#+END_SRC
*** Config StateEventCallback
#+begin_src C
[StateEvent(state = GameObject.Play, on = StateEvent.Enter)] // The Enter support coroutine
void Play() {

}
 Proxy MonoBehaviour event Callback
#+BEGIN_SRC 
[StateListener(state = "GameState", when = "Play", on = "Update")]
void PlayUpdate()
{
   // Do Update in Play;
}

void Update() {
    stateManager.Update;
}
#+END_SRC
When yout change "GameState" to Success or Play, it will auto proxy to the true Update callback.
*** Get a StateMachine Manual
#+BEGIN_SRC 
StateMachine sm = stateManager.GetStateMachine<GameState>();
#+END_SRC





